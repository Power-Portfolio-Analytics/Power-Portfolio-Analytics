{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Delta Neutral Straddle","provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"qqlH6MTGWvjx"},"source":["- Sell 1-month At-The-Money call and put options on the SPY\n","- Delta-hedge once a day (if delta above a threshold)\n","- Close other option in case one is assigned (or both on their last trading day"]},{"cell_type":"markdown","metadata":{"id":"XB3MfUEIWUoR"},"source":["**main.py**"]},{"cell_type":"code","metadata":{"id":"KWY4gFQJWSw2"},"source":["from QuantConnect.Securities.Option import OptionPriceModels\n","from datetime import timedelta\n","#import decimal as d\n","from my_calendar import last_trading_day\n","\n","class DeltaHedgedStraddleAlgo(QCAlgorithm):\n","\n","    def Initialize(self):\n","        self.SetStartDate(2015, 1, 1)\n","        self.SetEndDate(2020, 12, 31)\n","        self.SetCash(1000000)\n","        \n","        self.Log(\"PERIOD: 2015-2020\")\n","        \n","        # ----------------------------------------------------------------------\n","        # Algo params\n","        # ----------------------------------------------------------------------\n","        self.PREMIUM = 0.01  # percentage of SPY share price\n","        self.MAX_EXPIRY = 30 # max num of days to expiration => for uni selection\n","        self._no_K = 2       # no of strikes around ATM => for uni selection\n","        self.resol = Resolution.Minute   # Resolution.Minute .Hour  .Daily\n","        self.tkr = \"SPY\"  \n","        self.Lev = (1.0)\n","        \n","        # self.Ntnl_perc = d.Decimal( round( 1. / (2. * self.MAX_EXPIRY/7.), 2) ) #  notional percentage, e.g. 0.08\n","        self.select_flag, self.hedge_flag = False, False\n","        self.previous_delta, self.delta_treshold = (0.0), (0.05) \n","        # ----------------------------------------------------------------------\n","\n","        # add underlying Equity \n","        equity = self.AddEquity(self.tkr, self.resol)  \n","        equity.SetDataNormalizationMode(DataNormalizationMode.Raw) # IMPORTANT: default\n","        self.equity_symbol = equity.Symbol\n","        \n","        # Add options\n","        option = self.AddOption(self.tkr, self.resol)\n","        self.option_symbol = option.Symbol\n","\n","        # set our strike/expiry filter for this option chain\n","        option.SetFilter(self.UniverseFunc) # option.SetFilter(-2, +2, timedelta(0), timedelta(30))\n","\n","        # for greeks and pricer (needs some warmup) - https://github.com/QuantConnect/Lean/blob/21cd972e99f70f007ce689bdaeeafe3cb4ea9c77/Common/Securities/Option/OptionPriceModels.cs#L81\n","        option.PriceModel = OptionPriceModels.CrankNicolsonFD()  # both European & American, automatically\n","        # this is needed for Greeks calcs\n","        self.SetWarmUp(TimeSpan.FromDays(3))    # timedelta(7)\n","\n","        self._assignedOption = False\n","        self.call, self.put = None, None\n","        \n","        # -----------------------------------------------------------------------------\n","        # scheduled functions\n","        # -----------------------------------------------------------------------------\n","\n","        self.Schedule.On(self.DateRules.EveryDay(self.equity_symbol), \n","                         self.TimeRules.BeforeMarketClose(self.equity_symbol, 10),      \n","                         Action(self.close_options))\n","\n","   \n","    def close_options(self):\n","        \"\"\" Liquidate opts (with some value) and underlying\n","        \"\"\"\n","        # check this is the last trading day\n","        if self.last_trading_day != self.Time.date(): return\n","\n","        self.Log(\"On last trading day: liquidate options with value and underlying \")\n","\n","        # liquidate options (if invested and in the money [otherwise their price is min of $0.01)\n","        for x in self.Portfolio:    # symbol = x.Key; security = x.Value ## but also symbol = x.Value.Symbol \n","            if x.Value.Invested:    #  self.Portfolio[opt].Invested, but no need for self.Securities.ContainsKey(opt)\n","                # only liquidate valuable options, otherwise let them quietly expiry\n","                if self.Securities[x.Key].AskPrice > 0.05: self.Liquidate(x.Key)\n","\n","        # CHECK if this necessary (incorporated above)\n","        if self.Portfolio[self.equity_symbol].Invested: \n","            self.Liquidate(self.equity.Symbol)\n","            \n","    def OnData(self, slice):\n","\n","        if self.IsWarmingUp: return\n","\n","        # 1. deal with any early assignments\n","        if self._assignedOption:\n","            # close everything\n","            for x in self.Portfolio:  \n","                if x.Value.Invested: self.Liquidate(x.Key)\n","            self._assignedOption = False\n","        #   self.call, self.put = None, None  # stop getting Greeks\n","\n","        # 2. sell options, if none\n","        if not self.Portfolio.Invested:\n","            \n","            # select contract\n","            self.Log(\"get contract\")\n","            self.get_contracts(slice)\n","            if (not self.call) or (not self.put): return\n","    \n","            # trade\n","            unit_price =  self.Securities[self.equity_symbol].Price * (100.0)   # share price x 100\n","            qnty = int(self.Portfolio.TotalPortfolioValue / unit_price)   \n","            # call_exists, put_exists = self.call is not None, self.put is not None\n","            \n","            if self.call is not None: self.Sell(self.call.Symbol, qnty)  # self.MarketOrder(self.call.Symbol, -qnty)\n","            if self.put is not None:  self.MarketOrder(self.put.Symbol, -qnty)\n","\n","\n","        # 3. delta-hedged any existing option\n","        if self.Portfolio.Invested and self.HourMinuteIs(10, 1):\n","            self.get_greeks(slice)\n","            if abs(self.previous_delta - self.Delta) > self.delta_treshold:\n","                self.Log(\"delta_hedging: self.call {}, self.put {}, self.Delta {}\" .format(self.call, self.put, self.Delta))\n","                self.SetHoldings(self.equity_symbol, self.Delta)\n","                self.previous_delta = self.Delta\n","\n","\n","    def get_contracts(self, slice):\n","        \"\"\"\n","        Get ATM call and put\n","        \"\"\"\n","        for kvp in slice.OptionChains:\n","            if kvp.Key != self.option_symbol: continue\n","\n","            chain = kvp.Value   # option contracts for each 'subscribed' symbol/key \n","            \n","            spot_price = chain.Underlying.Price\n","        #   self.Log(\"spot_price {}\" .format(spot_price))\n","\n","            # prefer to do in steps, rather than a nested sorted\n","            \n","            # 1. get furthest expiry            \n","            contracts_by_T = sorted(chain, key = lambda x: x.Expiry, reverse = True)\n","            if not contracts_by_T: return\n","            self.expiry = contracts_by_T[0].Expiry.date() # furthest expiry \n","            self.last_trading_day = last_trading_day(self.expiry)\n","            \n","            # get contracts with further expiry and sort them by strike\n","            slice_T = [i for i in chain if i.Expiry.date() == self.expiry]\n","            sorted_contracts = sorted(slice_T, key = lambda x: x.Strike, reverse = False)\n","\n","        #   self.Log(\"Expiry used: {} and shortest {}\" .format(self.expiry, contracts_by_T[-1].Expiry.date()) )\n","\n","            # 2a. get the ATM closest CALL to short\n","            calls = [i for i in sorted_contracts \\\n","                     if i.Right == OptionRight.Call and i.Strike >= spot_price]\n","            self.call = calls[0] if calls else None\n","        #   self.Log(\"delta call {}, self.call type {}\" .format(self.call.Greeks.Delta, type(self.call)))\n","        #   self.Log(\"implied vol {} \" .format(self.call.ImpliedVolatility))\n","\n","            # 2b. get the ATM closest put to short\n","            puts = [i for i in sorted_contracts \\\n","                     if i.Right == OptionRight.Put and i.Strike <= spot_price]\n","            self.put = puts[-1] if puts else None\n","\n","\n","    def get_greeks(self, slice):\n","        \"\"\"\n","        Get greeks for invested option: self.call and self.put\n","        \"\"\"\n","\n","        if (self.call is None) or (self.put is None): return\n","        \n","        for kvp in slice.OptionChains:\n","            if kvp.Key != self.option_symbol: continue\n","            chain = kvp.Value   # option contracts for each 'subscribed' symbol/key \n","            traded_contracts = filter(lambda x: x.Symbol == self.call.Symbol or \n","                                         x.Symbol == self.put.Symbol, chain)\n","            if not traded_contracts: self.Log(\"No traded cointracts\"); return\n","        \n","            deltas = [i.Greeks.Delta for i in traded_contracts]\n","        #   self.Log(\"Delta: {}\" .format(deltas))\n","            self.Delta=sum(deltas)\n","            # self.Log(\"Vega: \" + str([i.Greeks.Vega for i in contracts]))\n","            # self.Log(\"Gamma: \" + str([i.Greeks.Gamma for i in contracts]))\n","\n","       \n","    def UniverseFunc(self, universe):\n","        return universe.IncludeWeeklys()\\\n","                    .Strikes(-self._no_K, self._no_K)\\\n","                    .Expiration(timedelta(1), timedelta(self.MAX_EXPIRY))\n","    \n","    # ----------------------------------------------------------------------\n","    # Other ancillary fncts\n","    # ----------------------------------------------------------------------   \n","    def OnOrderEvent(self, orderEvent):\n","    #   self.Log(\"Order Event -> {}\" .format(orderEvent))\n","        pass\n","\n","    def OnAssignmentOrderEvent(self, assignmentEvent):\n","        self.Log(str(assignmentEvent))\n","        self._assignedOption = True\n","    #   if self.isMarketOpen(self.equity_symbol):\n","    #       self.Liquidate(self.equity_symbol)\n","    \n","    def TimeIs(self, day, hour, minute):\n","        return self.Time.day == day and self.Time.hour == hour and self.Time.minute == minute\n","    \n","    def HourMinuteIs(self, hour, minute):\n","        return self.Time.hour == hour and self.Time.minute == minute"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QqCuIqHgWbA5"},"source":["**my_calendar.py**\n"]},{"cell_type":"code","metadata":{"id":"MiKTFbBDWtmf"},"source":["# ------------------------------------------------------------------------------\n","# Business days\n","# ------------------------------------------------------------------------------\n","from datetime import timedelta #, date\n","from pandas.tseries.holiday import (AbstractHolidayCalendar,    # inherit from this to create your calendar\n","                                    Holiday, nearest_workday,   # to custom some holidays\n","                                    #\n","                                    USMartinLutherKingJr,       # already defined holidays\n","                                    USPresidentsDay,            # \"     \"   \"   \"   \"   \"\n","                                    GoodFriday,\n","                                    USMemorialDay,              # \"     \"   \"   \"   \"   \"\n","                                    USLaborDay,\n","                                    USThanksgivingDay           # \"     \"   \"   \"   \"   \"\n","                                    )\n","\n","\n","class USTradingCalendar(AbstractHolidayCalendar):\n","    rules = [\n","      Holiday('NewYearsDay', month=1, day=1, observance=nearest_workday),\n","      USMartinLutherKingJr,\n","      USPresidentsDay,\n","      GoodFriday,\n","      USMemorialDay,\n","      Holiday('USIndependenceDay', month=7, day=4, observance=nearest_workday),\n","      USLaborDay,\n","      USThanksgivingDay,\n","      Holiday('Christmas', month=12, day=25, observance=nearest_workday)\n","    ]\n","\n","# TODO: to be tested\n","def last_trading_day(expiry):\n","    # American options cease trading on the third Friday, at the close of business \n","    # - Weekly options expire the same day as their last trading day, which will usually be a Friday (PM-settled), [or Mondays? & Wednesdays?]\n","    # \n","    # SPX cash index options (and other cash index options) expire on the Saturday following the third Friday of the expiration month. \n","    # However, the last trading day is the Thursday before that third Friday. Settlement price Friday morning opening (AM-settled).\n","    # http://www.daytradingbias.com/?p=84847\n","    \n","    dd = expiry     # option.ID.Date.date()\n","    \n","    # if expiry on a Saturday (standard options), then last trading day is 1d earlier \n","    if dd.weekday() == 5:\n","        dd -= timedelta(days=1)   # dd -= 1 * BDay()\n","        \n","    # check that Friday is not an holiday (e.g. Good Friday) and loop back\n","    while USTradingCalendar().holidays(dd, dd).tolist():    # if list empty (dd is not an holiday) -> False\n","        dd -= timedelta(days=1) \n","        \n","    return dd"],"execution_count":null,"outputs":[]}]}